{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ML Model Trainer</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
        }
        
        .container {
            max-width: 90%;
            margin: 0 auto;
        }
        
        .option-box {
            border: 1px solid #dee2e6;
            border-radius: 5px;
            padding: 0;
            margin-bottom: 20px;
            position: relative;
            overflow: visible;
            width: 100%;
        }
        
        .option-header {
            display: flex;
            align-items: center;
            margin-bottom: 0;
            padding: 15px;
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            width: 100%;
        }
        
        .option-radio {
            margin-right: 10px;
            accent-color: #0d6efd;
            width: 18px;
            height: 18px;
        }
        
        .option-content {
            padding: 0;
            width: 100%;
        }
        
        .disabled {
            opacity: 0.6;
            pointer-events: none;
        }
        
        .card {
            border: none;
            border-radius: 0;
            width: 100%;
        }
        
        .card-body {
            padding: 20px;
            width: 100%;
        }
        
        .ml-dropdown {
            position: relative;
            width: 100%;
        }
        
        .ml-dropdown-btn {
            background-color: white;
            color: #333;
            padding: 12px 16px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            cursor: pointer;
            width: 100%;
            text-align: left;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 16px;
        }
        
        .ml-dropdown-content {
            display: none;
            position: absolute;
            background-color: white;
            width: 100%;
            max-height: 300px;
            overflow-y: auto;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            z-index: 1050;
            margin-top: 5px;
        }
        
        .ml-dropdown-content.show {
            display: block;
        }
        
        .ml-item {
            color: #212529;
            padding: 10px 16px;
            text-decoration: none;
            display: block;
            border-bottom: 1px solid #f1f1f1;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .ml-item:hover {
            background-color: #f8f9fa;
        }
        
        .bi-chevron-down {
            transition: transform 0.2s ease;
        }
        
        .ml-dropdown-btn.active .bi-chevron-down {
            transform: rotate(180deg);
        }
        
        .train-btn-container {
            width: 100%;
            margin-top: 20px;
        }
        
        #results {
            margin-top: 30px;
            display: none;
        }
        
        .metric-card {
            border: 1px solid #dee2e6;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 15px;
            background-color: white;
        }
        
        .problem-type-indicator {
            padding: 5px 10px;
            border-radius: 4px;
            font-weight: bold;
            display: inline-block;
            margin-left: 10px;
        }
        
        .classification {
            background-color: #d4edda;
            color: #155724;
        }
        
        .regression {
            background-color: #cce5ff;
            color: #004085;
        }
        
        .target-column-selector {
            margin-top: 15px;
            display: none;
        }
        
        .chart-container {
            width: 100%;
            height: 400px;
            margin-top: 15px;
            margin-bottom: 15px;
        }
        
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .metric-item {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            border-left: 4px solid #0d6efd;
        }
    </style>
</head>
<body>
    {% include 'partials/navbar.html' %}
    
    <div class="container">
        <h1 class="my-4">Sequence Analysis</h1>
        
        <!-- File Upload Sections -->
        <div class="option-box">
            <div class="option-header">
                <input type="radio" name="fileOption" class="option-radio" id="op1-radio" checked>
                <h5 class="m-0">Separate Training and Testing Files</h5>
            </div>
            <div class="option-content" id="op1-content">
                <div class="file-option-section active" id="separateSection">
                    <div class="card">
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">Training Data</label>
                                <input class="form-control" type="file" name="training_file" id="trainingFile" accept=".csv">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Testing Data</label>
                                <input class="form-control" type="file" name="testing_file" id="testingFile" accept=".csv">
                            </div>
                            <div id="targetColumnContainerSeparate" class="target-column-selector">
                                <label class="form-label">Target Column</label>
                                <select class="form-select" name="target_column_separate" id="targetColumnSeparate"></select>
                            </div>
                            <div id="problemTypeIndicatorSeparate" class="mt-2" style="display: none;">
                                <strong>Problem Type:</strong> 
                                <span id="problemTypeValueSeparate" class="problem-type-indicator"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="option-box">
            <div class="option-header">
                <input type="radio" name="fileOption" class="option-radio" id="op2-radio">
                <h5 class="m-0">Dataset File with Split</h5>
            </div>
            <div class="option-content disabled" id="op2-content">
                <div class="file-option-section" id="singleSection">
                    <div class="card">
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">Dataset File</label>
                                <input class="form-control" type="file" name="dataset_file" id="datasetFile" accept=".csv">
                                <div class="form-text">The last column will be used as the target variable by default</div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <label class="form-label">Train Percentage</label>
                                    <input type="number" class="form-control" name="train_percent" value="80" min="1" max="99">
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Test Percentage</label>
                                    <input type="number" class="form-control" name="test_percent" value="20" min="1" max="99" readonly>
                                </div>
                            </div>
                            <div id="targetColumnContainer" class="target-column-selector">
                                <label class="form-label">Target Column</label>
                                <select class="form-select" name="target_column" id="targetColumn"></select>
                            </div>
                            <div id="problemTypeIndicator" class="mt-2" style="display: none;">
                                <strong>Problem Type:</strong> 
                                <span id="problemTypeValue" class="problem-type-indicator"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Algorithm Selection -->
        <div class="ML_box">
            <div class="ML_header">
                <h5 class="m-0">Machine Learning Algorithm</h5>
            </div>
            <div class="ML_content">
                <div class="card">
                    <div class="card-body">
                        <div class="ml-dropdown">
                            <button type="button" class="ml-dropdown-btn" id="mlDropdownBtn">
                                <span id="selectedAlgorithm">Select Algorithm</span>
                                <i class="bi bi-chevron-down"></i>
                            </button>
                            <div class="ml-dropdown-content" id="mlDropdown"></div>
                        </div>
                        <input type="hidden" name="algorithm" id="algorithmValue">
                    </div>
                </div>
            </div>
        </div>

        <!-- Training Button -->
        <div class="train-btn-container text-center">
            <button type="button" class="btn btn-success btn-lg" id="trainButton">
                <i class="bi bi-play-circle me-1"></i> Train Model
            </button>
            <div id="loadingIndicator" class="mt-3" style="display: none;">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Training model...</p>
            </div>
        </div>

        <!-- Results Section -->
        <div id="results">
            <div class="header">
                <h5 class="m-0">Training Results</h5>
            </div>
            <div class="content">
                <div class="card">
                    <div class="card-body" id="resultContent"></div>
                </div>
            </div>
        </div>
    </div>

    {% include 'partials/footer.html' %}
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Global variables for charts
        window.rocChart = null;
        window.prcChart = null;

        // File option toggle functionality
        const radioButtons = document.querySelectorAll('input[name="fileOption"]');
        const contents = document.querySelectorAll('.option-content');
        
        // Set initial state
        document.getElementById('op1-content').classList.remove('disabled');
        document.getElementById('op2-content').classList.add('disabled');
        
        radioButtons.forEach(radio => {
            radio.addEventListener('change', function() {
                contents.forEach(content => {
                    if (content.id === this.id.replace('-radio', '-content')) {
                        content.classList.remove('disabled');
                    } else {
                        content.classList.add('disabled');
                    }
                });
            });
        });

        // ML Algorithm Dropdown functionality
        const mlDropdownBtn = document.getElementById('mlDropdownBtn');
        const mlDropdown = document.getElementById('mlDropdown');
        const selectedAlgorithm = document.getElementById('selectedAlgorithm');
        const algorithmValue = document.getElementById('algorithmValue');
        
        mlDropdownBtn.classList.remove('active');
        mlDropdown.classList.remove('show');
        
        mlDropdownBtn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            this.classList.toggle('active');
            mlDropdown.classList.toggle('show');
        });
        
        document.addEventListener('click', function(e) {
            if (!mlDropdownBtn.contains(e.target) && !mlDropdown.contains(e.target)) {
                mlDropdownBtn.classList.remove('active');
                mlDropdown.classList.remove('show');
            }
        });
        
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                mlDropdownBtn.classList.remove('active');
                mlDropdown.classList.remove('show');
            }
        });

        // Update test percentage
        document.querySelector('input[name="train_percent"]').addEventListener('change', function() {
            const testPercent = 100 - parseInt(this.value);
            document.querySelector('input[name="test_percent"]').value = testPercent;
        });

        // File analysis function
        function analyzeFile(file, isSeparateFiles = false) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    const contents = e.target.result;
                    const lines = contents.split('\n').filter(line => line.trim() !== '');
                    
                    if (lines.length < 2) {
                        reject('File must contain at least one data row');
                        return;
                    }
                    
                    const headers = lines[0].split(',');
                    const targetColumnSelector = isSeparateFiles ? 
                        document.getElementById('targetColumnSeparate') : 
                        document.getElementById('targetColumn');
                    
                    targetColumnSelector.innerHTML = '';
                    
                    headers.forEach((header, index) => {
                        const option = document.createElement('option');
                        option.value = index;
                        option.textContent = header;
                        if (index === headers.length - 1) {
                            option.selected = true;
                        }
                        targetColumnSelector.appendChild(option);
                    });
                    
                    const targetColumnContainer = isSeparateFiles ? 
                        document.getElementById('targetColumnContainerSeparate') : 
                        document.getElementById('targetColumnContainer');
                    targetColumnContainer.style.display = 'block';
                    
                    let isProbablyRegression = true;
                    let sampleValues = [];
                    const targetColIndex = headers.length - 1;
                    
                    for (let i = 1; i < Math.min(10, lines.length); i++) {
                        const values = lines[i].split(',');
                        if (values.length <= targetColIndex) continue;
                        
                        const value = values[targetColIndex].trim();
                        sampleValues.push(value);
                        
                        if (isNaN(value)) {
                            isProbablyRegression = false;
                        }
                    }
                    
                    const problemTypeIndicator = isSeparateFiles ? 
                        document.getElementById('problemTypeIndicatorSeparate') : 
                        document.getElementById('problemTypeIndicator');
                    const problemTypeValue = isSeparateFiles ? 
                        document.getElementById('problemTypeValueSeparate') : 
                        document.getElementById('problemTypeValue');
                    
                    problemTypeIndicator.style.display = 'block';
                    
                    if (isProbablyRegression) {
                        problemTypeValue.textContent = 'Regression';
                        problemTypeValue.className = 'problem-type-indicator regression';
                    } else {
                        problemTypeValue.textContent = 'Classification';
                        problemTypeValue.className = 'problem-type-indicator classification';
                    }
                    
                    const mlDropdown = document.getElementById('mlDropdown');
                    mlDropdown.innerHTML = '';
                    
                    const algorithms = isProbablyRegression ? [
                        {value: 'linear_regression', name: 'Linear Regression'},
                        {value: 'random_forest_regressor', name: 'Random Forest Regressor'},
                        {value: 'svm_regressor', name: 'Support Vector Regressor'}
                    ] : [
                        {value: 'logistic_regression', name: 'Logistic Regression'},
                        {value: 'decision_tree', name: 'Decision Tree'},
                        {value: 'random_forest', name: 'Random Forest'},
                        {value: 'svm', name: 'Support Vector Machine'},
                        {value: 'knn', name: 'K-Nearest Neighbors'},
                        {value: 'neural_network', name: 'Neural Network'}
                    ];
                    
                    algorithms.forEach(algo => {
                        const item = document.createElement('div');
                        item.className = 'ml-item';
                        item.dataset.value = algo.value;
                        item.textContent = algo.name;
                        mlDropdown.appendChild(item);
                    });
                    
                    document.querySelectorAll('.ml-item').forEach(item => {
                        item.addEventListener('click', function(e) {
                            e.preventDefault();
                            selectedAlgorithm.textContent = this.textContent;
                            algorithmValue.value = this.dataset.value;
                            mlDropdownBtn.classList.remove('active');
                            mlDropdown.classList.remove('show');
                        });
                    });
                    
                    resolve({
                        headers,
                        isRegression: isProbablyRegression
                    });
                };
                
                reader.onerror = function() {
                    reject('Error reading file');
                };
                
                reader.readAsText(file);
            });
        }

        // File upload handlers
        document.getElementById('trainingFile').addEventListener('change', function(e) {
            if (this.files.length > 0) {
                analyzeFile(this.files[0], true)
                    .catch(error => {
                        console.error('Error analyzing file:', error);
                        alert(error);
                    });
            }
        });

        document.getElementById('datasetFile').addEventListener('change', function(e) {
            if (this.files.length > 0) {
                analyzeFile(this.files[0], false)
                    .catch(error => {
                        console.error('Error analyzing file:', error);
                        alert(error);
                    });
            }
        });

        // ROC Curve drawing function
        function drawROCCurve(fpr, tpr, auc) {
            const container = document.createElement('div');
            container.className = 'chart-container';
            container.innerHTML = '<canvas id="rocCurve"></canvas>';
            document.getElementById('resultContent').appendChild(container);
            
            const ctx = container.querySelector('canvas').getContext('2d');
            
            if (window.rocChart) {
                window.rocChart.destroy();
            }
            
            window.rocChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: fpr.map((_, i) => `Threshold ${i}`),
                    datasets: [{
                        label: `ROC Curve (AUC = ${auc.toFixed(4)})`,
                        data: tpr.map((t, i) => ({x: fpr[i], y: t})),
                        borderColor: 'rgb(75, 192, 192)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        fill: true,
                        tension: 0.1
                    }, {
                        label: 'Random',
                        data: [{x: 0, y: 0}, {x: 1, y: 1}],
                        borderColor: 'rgb(255, 99, 132)',
                        borderDash: [5, 5],
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'False Positive Rate'
                            },
                            min: 0,
                            max: 1
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'True Positive Rate'
                            },
                            min: 0,
                            max: 1
                        }
                    }
                }
            });
        }

        // Precision-Recall Curve drawing function
        function drawPRCCurve(recall, precision, auc) {
            const container = document.createElement('div');
            container.className = 'chart-container';
            container.innerHTML = '<canvas id="prcCurve"></canvas>';
            document.getElementById('resultContent').appendChild(container);
            
            const ctx = container.querySelector('canvas').getContext('2d');
            
            if (window.prcChart) {
                window.prcChart.destroy();
            }
            
            window.prcChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: recall.map((_, i) => `Threshold ${i}`),
                    datasets: [{
                        label: `Precision-Recall Curve (AUC = ${auc.toFixed(4)})`,
                        data: precision.map((p, i) => ({x: recall[i], y: p})),
                        borderColor: 'rgb(153, 102, 255)',
                        backgroundColor: 'rgba(153, 102, 255, 0.2)',
                        fill: true,
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Recall'
                            },
                            min: 0,
                            max: 1
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Precision'
                            },
                            min: 0,
                            max: 1
                        }
                    }
                }
            });
        }

        // Training functionality
        document.getElementById('trainButton').addEventListener('click', function() {
            if (!algorithmValue.value) {
                alert('Please select an algorithm');
                return;
            }

            const useSeparateFiles = document.getElementById('op1-radio').checked;
            
            let formData = new FormData();
            
            if (useSeparateFiles) {
                const trainingFile = document.getElementById('trainingFile').files[0];
                const testingFile = document.getElementById('testingFile').files[0];
                const targetColumn = document.getElementById('targetColumnSeparate').value;
                
                if (!trainingFile || !testingFile) {
                    alert('Please upload both training and testing files');
                    return;
                }
                
                formData.append('training_file', trainingFile);
                formData.append('testing_file', testingFile);
                formData.append('target_column', targetColumn);
                formData.append('file_option', 'separate');
            } else {
                const datasetFile = document.getElementById('datasetFile').files[0];
                const trainPercent = document.querySelector('input[name="train_percent"]').value;
                const targetColumn = document.getElementById('targetColumn').value;
                
                if (!datasetFile) {
                    alert('Please upload a dataset file');
                    return;
                }
                
                formData.append('dataset_file', datasetFile);
                formData.append('train_percent', trainPercent);
                formData.append('target_column', targetColumn);
                formData.append('file_option', 'single');
            }
            
            formData.append('algorithm', algorithmValue.value);

            document.getElementById('loadingIndicator').style.display = 'block';
            document.getElementById('trainButton').disabled = true;
            document.getElementById('results').style.display = 'none';
            document.getElementById('resultContent').innerHTML = '';

            function getCookie(name) {
                let cookieValue = null;
                if (document.cookie && document.cookie !== '') {
                    const cookies = document.cookie.split(';');
                    for (let i = 0; i < cookies.length; i++) {
                        const cookie = cookies[i].trim();
                        if (cookie.substring(0, name.length + 1) === (name + '=')) {
                            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                            break;
                        }
                    }
                }
                return cookieValue;
            }
            
            const csrftoken = getCookie('csrftoken');

            fetch("{% url 'train_model' %}", {
                method: 'POST',
                body: formData,
                headers: {
                    'X-CSRFToken': csrftoken
                }
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => { throw new Error(err.error || 'Network response was not ok') });
                }
                return response.json();
            })
            .then(data => {
                if (data.error) {
                    throw new Error(data.error);
                }
                
                const resultContent = document.getElementById('resultContent');
                let resultsHtml = `
                    <div class="metric-card">
                        <h5>Algorithm: ${data.algorithm}</h5>
                        <p>Problem Type: <span class="problem-type-indicator ${data.problem_type}">${data.problem_type}</span></p>
                `;
                
                if (data.problem_type === 'classification') {
                    // Create metrics grid
                    resultsHtml += `
                        <div class="metrics-grid">
                            <div class="metric-item">
                                <h6>Accuracy</h6>
                                <p>${data.accuracy ? data.accuracy.toFixed(4) : 'N/A'}</p>
                            </div>
                            <div class="metric-item">
                                <h6>Precision</h6>
                                <p>${data.precision ? data.precision.toFixed(4) : 'N/A'}</p>
                            </div>
                            <div class="metric-item">
                                <h6>Recall</h6>
                                <p>${data.recall ? data.recall.toFixed(4) : 'N/A'}</p>
                            </div>
                            <div class="metric-item">
                                <h6>F1 Score</h6>
                                <p>${data.f1_score ? data.f1_score.toFixed(4) : 'N/A'}</p>
                            </div>
                            <div class="metric-item">
                                <h6>Specificity</h6>
                                <p>${data.specificity ? data.specificity.toFixed(4) : 'N/A'}</p>
                            </div>
                            <div class="metric-item">
                                <h6>Sensitivity</h6>
                                <p>${data.sensitivity ? data.sensitivity.toFixed(4) : 'N/A'}</p>
                            </div>
                        </div>
                    </div>
                    <div class="metric-card">
                        <h5>Confusion Matrix</h5>
                        <pre>${data.confusion_matrix ? JSON.stringify(data.confusion_matrix, null, 2) : 'N/A'}</pre>
                    </div>
                `;
                    
                    if (data.roc_curve) {
                        resultsHtml += `
                            <div class="metric-card">
                                <h5>ROC Curve</h5>
                                <p>AUROC: ${data.auc ? data.auc.toFixed(4) : 'N/A'}</p>
                        `;
                    }
                    
                    if (data.pr_curve) {
                        resultsHtml += `
                            <div class="metric-card">
                                <h5>Precision-Recall Curve</h5>
                                <p>AUPRC: ${data.auprc ? data.auprc.toFixed(4) : 'N/A'}</p>
                        `;
                    }
                } else {
                    resultsHtml += `
                        <div class="metrics-grid">
                            <div class="metric-item">
                                <h6>Mean Squared Error</h6>
                                <p>${data.mse ? data.mse.toFixed(4) : 'N/A'}</p>
                            </div>
                            <div class="metric-item">
                                <h6>Mean Absolute Error</h6>
                                <p>${data.mae ? data.mae.toFixed(4) : 'N/A'}</p>
                            </div>
                            <div class="metric-item">
                                <h6>R² Score</h6>
                                <p>${data.r2_score ? data.r2_score.toFixed(4) : 'N/A'}</p>
                            </div>
                        </div>
                    `;
                }
                
                resultsHtml += `</div>`;
                resultContent.innerHTML = resultsHtml;
                document.getElementById('results').style.display = 'block';
                
                if (data.problem_type === 'classification') {
                    if (data.roc_curve) {
                        drawROCCurve(data.roc_curve.fpr, data.roc_curve.tpr, data.auc);
                    }
                    
                    if (data.pr_curve) {
                        drawPRCCurve(data.pr_curve.recall, data.pr_curve.precision, data.auprc);
                    }
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Training failed: ' + error.message);
            })
            .finally(() => {
                document.getElementById('loadingIndicator').style.display = 'none';
                document.getElementById('trainButton').disabled = false;
            });
        });
    </script>
</body>
</html>




